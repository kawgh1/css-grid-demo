

/*=========== 
  base style 
=============*/
body {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: 'Lato', sans-serif;
      color: #222;
}

/*=========== 
  grid setup 
=============*/

body {
    display: grid;
    /* we want the grid full screen, some of the containers are things
    like toolbars, and menu bars on the screen perimeter */
    min-height: 100vh;
    min-width: 100%;
    /* this means make one 90px tall row on the bottom 
    and a rest of screen row on the top */
    grid-template-rows: 1fr 120px;
    /* this means make one 40px wide column on the left 
    and a rest of screen column on the right */
    grid-template-columns: 110px 1fr;

    /* The grid-template-areas property 
       provides a visual structure of the grid.  */
    grid-template-areas: "sidebar content"
                         "footer  footer";
}


/* This is like assigning areas of the total grid to specific grid areas
with variable names like content, footer and siderbar */

/* did not know this was possible in CSS */

.main {
    grid-area: content;
}

.footer {
    grid-area: footer;
}

.aside {
    grid-area: sidebar;
}

/* 
    The code block above says, 
    let the .main element have an area name of content. 
    Let the .footer element have an area name of footer. 
    Finally, let the .aside class have a grid name of sidebar

    Now the grid items have all been assigned area names.
 */

 .main {
    grid-area: content;
    /* background-color: #2c3e50; */
  }
  
  .footer {
    grid-area: footer;
    background-color: royalblue;
  }
  
  .aside {
    grid-area: sidebar;
    /* grid within a grid-area */
    display: grid;

    background-color: #f2f2f2;
    justify-items: center;
    align-items: center;

    
  }

  .aside i {
    display: block;
      color: #2c3e50;
  }

/*================
   main header 
=================*/
  .main__header {
    /* another grid */
    display: grid;
    grid-template-columns: 250px 1fr;
    grid-template-areas: "img dtls";

    background-color: #4e4e4e;
    color: rgba(255,255,255,0.9);
    margin-bottom: 10px;
    padding: 20px;
    
  }

  .main__header > .img {
    grid-area: img;
  }
  .main__header > .details {
    grid-area: dtls;
  }

/*================
   main body (songs) 
=================*/
.main__body {
    padding: 8px;
  background-color: #fff;
}
/* For our use case, each direct div child of .main__body needs
 to be flex container. This is the div that contains the name 
 of the song, artiste, duration of the song and “catty cloud 
 sync”. */

.main__body > div {
    /* make UI components flex where it makes sense */
    display:flex;
    padding: 8px;
  }

  /* Now split the width amongst the children elements: */

  .main__body > div p {
    /* flex: flex-grow  flex-shrink  flex-basis */
    /* so here, each <p> tag takes 1/4 the flex container's width */
    flex: 0 0 25%;
    
  }

  /* alternate background colors for rows */
  .main__body > div:nth-child(2n) {
    background-color: #f2f2f2;
    border-radius: 5px;
}

/*===============
  footer (player controls)
===============*/

.footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.track {
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
    font-size: .9rem;

}

.track > .img > img {
    height: 90px;
    width: 90px;
    margin: 15px 10px 10px;
}

/* controls */
.controls {
    font-size: 1.5rem;
    width: 60%;
    color: white;
    margin-right: 10px;
    display: flex;
    justify-content: space-around;
}

.controls i {
    padding: 10px;
    font-weight: 300;
    font-size: 1.1rem;
}

/*===============
  clean ups.
===============*/

.details {
	display: flex;
	flex-direction: column;
	font-weight: 300;
	color: #fff;
    margin-left: 10px; 
}

.details div:nth-child(1){
	margin-bottom: auto;
}

.details div:nth-child(2){
	margin-top: 0;
}



.details div:nth-child(2) i.fa{
	font-size: 0.9rem;
	padding: 0 0.7rem;
	font-weight: 300;
}

.details div:nth-child(1) p:first-child{
	font-size: 1.3rem;
	margin: 10px 0 20px;
}

.details div:nth-child(1) p:not(:first-child){
	font-size: 0.9rem;
	margin: 2px 0;
}

.sm-text-right {
    text-align: center;
}

.sm--hide span{
    font-size: .6rem;
    border: 1px solid #222;
    width: fit-content;
    padding: .2rem .15rem;
    letter-spacing: -.1px;
}

img {
    border-radius: 5px;
}

/*=================
    media queries
================== */

@media only screen and (max-width: 800px) {
    body {
        grid-template-rows: 1fr 90px;
        grid-template-columns: 80px 1fr;
    }

    .track > .img > img {
        height: 70px;
        width: 70px;
        margin: 15px 8px 10px;
    }

}

@media only screen and (max-width: 600px) {
    /* on mobile screens, just 1 column and 2 rows */
    body {
        grid-template-rows: 1fr 90px;
        grid-template-columns: 1fr;
        grid-template-areas: "content"
                                "footer";
        font-family: 'Lato', sans-serif;
        color: #222;
    }

    img {
        max-width: 100%;
    }

    /* main header */
    .main__header {
        display: grid;
        grid-template-columns: 1fr;
        justify-items: center; 
        align-items: center;
        grid-template-areas: "img"
                             "dtls"; 
      } 
    .main__header > .details {
        grid-area: dtls;
    text-align: center;
    }  

    .main__header > p {
        font-size: .8em;
    }
    .main__header > .img {
        grid-area: img;
    }
    .img > img {
        width: 150px
      }

      .details {
        margin-left: auto; 
    }

    .track {
        display: none;
    }

    /* every element with class .sm--hide applied will be hidden on mobile */
    .sm--hide {
        display: none;
      } 
      i.sm--hide {
        display: none;
      } 

      .aside i {
          display: none;
      }

      .sm-text-right {
        text-align: right;
    }

    .main__body > div p{
        flex: 0 0 33%;
      }

    .controls {
        justify-content: space-evenly;
        width: 100%;
    }
}